{"version":3,"sources":["logo.svg","Navbar.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Example","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","Navbar","color","light","expand","NavbarBrand","href","src","style","width","marginTop","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","React","Component","Card","CardImg","top","alt","CardBody","CardTitle","CardSubtitle","CardText","Button","App","Navbar_Example","Container","Row","Col","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7691980.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\nexport default class Example extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"light\" light expand=\"md\">\r\n                    <NavbarBrand href=\"/\"> <img src=\"https://github.com/Oswal-Fuentes/online-store/tree/gh-pages/pics/logo.png\" style={{ width: 100, marginTop: -7 }} /> </NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"/\">Sign In</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink href=\"/\"> <img src=\"https://github.com/Oswal-Fuentes/online-store/tree/gh-pages/pics/cart.png\" style={{ width: 30, marginTop: -7 }} /> </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n{/*}<UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                  Options\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  <DropdownItem>\r\n                    Option 1\r\n                  </DropdownItem>\r\n                  <DropdownItem>\r\n                    Option 2\r\n                  </DropdownItem>\r\n                  <DropdownItem divider />\r\n                  <DropdownItem>\r\n                    Reset\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n    </UncontrolledDropdown>{*/}","import React from 'react';\r\nimport { Card, CardImg, CardText, CardBody,\r\n  CardTitle, CardSubtitle, Button } from 'reactstrap';\r\n\r\nconst Example = (props) => {\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardImg top src=\"https://github.com/Oswal-Fuentes/online-store/tree/gh-pages/pics/fur1.jpg\" alt=\"Card image cap\" />\r\n        <CardBody>\r\n          <CardTitle>Card title</CardTitle>\r\n          <CardSubtitle>Card subtitle</CardSubtitle>\r\n          <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\r\n          <Button>Add to cart</Button>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./Navbar\";\nimport Card from \"./Card\";\nimport { Container, Row, Col } from 'reactstrap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Navbar></Navbar>\n        <Container>\n          <Row>\n            <Col> <Card></Card> </Col>\n            <Col> <Card></Card> </Col>\n            <Col> <Card></Card> </Col>\n          </Row>\n          <Row>\n            <Col> <Card></Card> </Col>\n            <Col> <Card></Card> </Col>\n            <Col> <Card></Card> </Col>\n          </Row>\n          <Row>\n            <Col> <Card></Card> </Col>\n            <Col> <Card></Card> </Col>\n            <Col> <Card></Card> </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}